#pragma kernel CSMain

RWTexture3D<float> VolumeTexture;
Texture2D<float> OcclusionTexture;
float3 VolumeTextureSize;
float HeightToIgnoreOcclusion;
SamplerState sampler_OcclusionTexture;
float4x4 _VolumeToWorld;
float4x4 _WorldToVolume;

StructuredBuffer<float4> Observers;
int ObserverCount;


[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= VolumeTextureSize.x || id.y >= VolumeTextureSize.y || id.z >= VolumeTextureSize.z) return;
    
    float3 norm = (float3(id) + 0.5f) / VolumeTextureSize;

    const float4 local_pos = float4((float3(id) / VolumeTextureSize) - 0.5, 1.0);
    const float3 voxel_world_pos = mul(_VolumeToWorld, local_pos).xyz;
    
    float output = 1.0;
    
    for (int i = 0; i < ObserverCount; ++i)
    {
        const float3 observer_pos = float3(Observers[i].x, Observers[i].y, Observers[i].z);
        const float dist = distance(observer_pos, voxel_world_pos);

        if (dist > Observers[i].w)
            continue;


        const float4 observer_local_pos = mul(_WorldToVolume, float4(observer_pos, 1.0));

        if (observer_local_pos.y > HeightToIgnoreOcclusion)
        {
            output = 0.0;
            break;
        }
        
        // const float occlusion = OcclusionTexture.SampleLevel(sampler_OcclusionTexture, norm.xz, 0).r;
        // if (occlusion < 0.5)
        // {
        //     output = 0.0;
        //     break;
        // }
        
        const int steps = 64;
        bool blocked = false;
        for (int s = 0; s < steps; ++s)
        {
            const float t = s / (float)(steps - 1);
            const float4 sample_world_pos = float4(lerp(observer_pos, voxel_world_pos, t), 1.0);
            const float3 sample_local_pos = mul(_WorldToVolume, sample_world_pos).xyz;
            float3 sample_id = (sample_local_pos + 0.5) * VolumeTextureSize;
            float3 sample_norm = (float3(sample_id) + 0.5f) / VolumeTextureSize;

            const float occ_sample = OcclusionTexture.SampleLevel(sampler_OcclusionTexture, sample_norm.xz, 0).r;
            if (occ_sample < 0.5f)
            {
                blocked = true;
                break;
            }
        }
        if (!blocked)
        {
            output = 0.0f;
            break;
        }
    }
    

    VolumeTexture[id.xyz] = output;
}
